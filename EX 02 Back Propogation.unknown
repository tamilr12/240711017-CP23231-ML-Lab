{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Step 1: Import necessary libraries"
      ],
      "metadata": {
        "id": "Td0V2MsJYR46"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NCrUgmEgYFfR"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "# Step 2: Define Activation Function (Sigmoid)"
      ],
      "metadata": {
        "id": "A069tvhOYc8V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sigmoid(x):\n",
        "    return 1 / (1 + np.exp(-x))\n",
        "\n",
        "def sigmoid_derivative(x):\n",
        "    return x * (1 - x)"
      ],
      "metadata": {
        "id": "TpQsWix2Yard"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 3: Define XOR Dataset"
      ],
      "metadata": {
        "id": "3DYn_wSgYlhK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = np.array([[0, 0],\n",
        "              [0, 1],\n",
        "              [1, 0],\n",
        "              [1, 1]])\n",
        "\n",
        "y = np.array([[0], [1], [1], [0]])\n"
      ],
      "metadata": {
        "id": "kqsK4eHAYcRb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 4: Initialize Network Parameters"
      ],
      "metadata": {
        "id": "bLMNGUCDYnLs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.seed(42)\n",
        "input_neurons = 2   # Two input features\n",
        "hidden_neurons = 2  # Two neurons in the hidden layer\n",
        "output_neurons = 1  # Single output neuron\n"
      ],
      "metadata": {
        "id": "5mTVRjTEYqB5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Initialize Weights and Biases randomly"
      ],
      "metadata": {
        "id": "FBuInXWFYvmL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "weights_input_hidden = np.random.uniform(size=(input_neurons, hidden_neurons))\n",
        "bias_hidden = np.random.uniform(size=(1, hidden_neurons))\n",
        "weights_hidden_output = np.random.uniform(size=(hidden_neurons, output_neurons))\n",
        "bias_output = np.random.uniform(size=(1, output_neurons))"
      ],
      "metadata": {
        "id": "rvch4MTvYsZL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 5: Set Learning Parameters"
      ],
      "metadata": {
        "id": "In45dFTLY0DR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "learning_rate = 0.1\n",
        "epochs = 10000  # Number of iterations\n"
      ],
      "metadata": {
        "id": "Z0-UuzQnYyAc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 6: Training the Neural Network using Backpropagation"
      ],
      "metadata": {
        "id": "RtP-lmhyY7eH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for epoch in range(epochs):\n",
        "    # Forward Pass\n",
        "    hidden_input = np.dot(X, weights_input_hidden) + bias_hidden\n",
        "    hidden_output = sigmoid(hidden_input)\n",
        "\n",
        "    final_input = np.dot(hidden_output, weights_hidden_output) + bias_output\n",
        "    predicted_output = sigmoid(final_input)\n",
        "\n",
        "    # Compute Error\n",
        "    error = y - predicted_output\n",
        "\n",
        "    # Backpropagation\n",
        "    output_gradient = error * sigmoid_derivative(predicted_output)\n",
        "    hidden_gradient = np.dot(output_gradient, weights_hidden_output.T) * sigmoid_derivative(hidden_output)\n",
        "\n",
        "    # Update Weights and Biases\n",
        "    weights_hidden_output += np.dot(hidden_output.T, output_gradient) * learning_rate\n",
        "    bias_output += np.sum(output_gradient, axis=0, keepdims=True) * learning_rate\n",
        "    weights_input_hidden += np.dot(X.T, hidden_gradient) * learning_rate\n",
        "    bias_hidden += np.sum(hidden_gradient, axis=0, keepdims=True) * learning_rate\n",
        "\n",
        "    # Print Loss Every 1000 Epochs\n",
        "    if (epoch + 1) % 1000 == 0:\n",
        "        loss = np.mean(np.abs(error))\n",
        "        print(f'Epoch {epoch + 1}, Loss: {loss:.5f}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ehJZYW8Y5u7",
        "outputId": "3c77a67d-59b0-468e-84be-30dc62a5ce56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1000, Loss: 0.43059\n",
            "Epoch 2000, Loss: 0.33589\n",
            "Epoch 3000, Loss: 0.17368\n",
            "Epoch 4000, Loss: 0.11185\n",
            "Epoch 5000, Loss: 0.08578\n",
            "Epoch 6000, Loss: 0.07132\n",
            "Epoch 7000, Loss: 0.06198\n",
            "Epoch 8000, Loss: 0.05538\n",
            "Epoch 9000, Loss: 0.05041\n",
            "Epoch 10000, Loss: 0.04652\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Step 7: Testing the Model"
      ],
      "metadata": {
        "id": "pNtR5Vt8ZGRs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "hidden_input = np.dot(X, weights_input_hidden) + bias_hidden\n",
        "hidden_output = sigmoid(hidden_input)\n",
        "final_input = np.dot(hidden_output, weights_hidden_output) + bias_output\n",
        "predicted_output = sigmoid(final_input)\n",
        "\n",
        "print(\"\\nPredicted Output After Training:\")\n",
        "print(predicted_output)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OXsHsyI-ZHG6",
        "outputId": "ed2833c9-2f36-423a-ab49-b0d0fa887670"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Predicted Output After Training:\n",
            "[[0.04937439]\n",
            " [0.95547408]\n",
            " [0.95537607]\n",
            " [0.04754195]]\n"
          ]
        }
      ]
    }
  ]
}